# /* Setup Your Backend API
# Ensure your Flask backend API is up and running. For example, if you have a Flask app with the following endpoints:

# GET /users: Retrieve all users
# POST /users: Add a new user
# GET /users/<id>: Retrieve a specific user by ID
# Your Flask code should look something like this: */

from flask import Flask, request, jsonify
from flask_cors import CORS
import psycopg2

app = Flask(__name__)
CORS(app)  # Allow cross-origin requests

# Database connection setup (example configuration)
def get_db_connection():
    conn = psycopg2.connect(
        host='localhost',
        database='your_db',
        user='your_user',
        password='your_password'
    )
    return conn

# GET endpoint to retrieve users
@app.route('/users', methods=['GET'])
def get_users():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('SELECT id, name FROM users')
    users = cur.fetchall()
    cur.close()
    conn.close()
    return jsonify([{'id': user[0], 'name': user[1]} for user in users])

# POST endpoint to add a new user
@app.route('/users', methods=['POST'])
def add_user():
    new_user = request.get_json()
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('INSERT INTO users (name) VALUES (%s) RETURNING id', (new_user['name'],))
    user_id = cur.fetchone()[0]
    conn.commit()
    cur.close()
    conn.close()
    new_user['id'] = user_id
    return jsonify(new_user), 201

# GET endpoint to retrieve a specific user by ID
@app.route('/users/<int:user_id>', methods=['GET'])
def get_user(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('SELECT id, name FROM users WHERE id = %s', (user_id,))
    user = cur.fetchone()
    cur.close()
    conn.close()
    if user:
        return jsonify({'id': user[0], 'name': user[1]})
    else:
        return jsonify({"error": "User not found"}), 404

if __name__ == '__main__':
    app.run(debug=True)

# 2. Setup Your Frontend
# In your frontend code, you'll fetch data from the Flask API and display it. Hereâ€™s how you can do this using plain HTML/JavaScript and React.js as examples.

# Using Plain HTML/JavaScript
# Create an HTML file (index.html) with JavaScript to interact with your Flask API:


# using Plain HTML/JavaScript
# Create an HTML file (index.html) with JavaScript to interact with your Flask API:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users</title>
</head>
<body>
    <h1>Users</h1>
    <ul id="user-list"></ul>
    <h2>Add User</h2>
    <form id="add-user-form">
        <input type="text" id="user-name" placeholder="Name" required />
        <button type="submit">Add User</button>
    </form>

    <script>
        const apiUrl = 'http://127.0.0.1:5000/users';

        // Function to fetch and display users
        function fetchUsers() {
            fetch(apiUrl)
                .then(response => response.json())
                .then(users => {
                    const userList = document.getElementById('user-list');
                    userList.innerHTML = '';
                    users.forEach(user => {
                        const li = document.createElement('li');
                        li.textContent = `ID: ${user.id}, Name: ${user.name}`;
                        userList.appendChild(li);
                    });
                })
                .catch(error => console.error('Error:', error));
        }

        // Function to add a user
        
        function addUser(event) {
            event.preventDefault();
            const name = document.getElementById('user-name').value;

            fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name }),
            })
            .then(response => response.json())
            .then(user => {
                console.log('User added:', user);
                fetchUsers(); // Refresh the list
            })
            .catch(error => console.error('Error:', error));
        }

        document.getElementById('add-user-form').addEventListener('submit', addUser);

        // Fetch users on page load
        fetchUsers();
    </script>
</body>
</html>

# using react;

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const apiUrl = 'http://127.0.0.1:5000/users';

const Users = () => {
    const [users, setUsers] = useState([]);
    const [name, setName] = useState('');

    useEffect(() => {
        fetchUsers();
    }, []);

    const fetchUsers = async () => {
        try {
            const response = await axios.get(apiUrl);
            setUsers(response.data);
        } catch (error) {
            console.error('Error fetching users:', error);
        }
    };

    const addUser = async (event) => {
        event.preventDefault();
        try {
            const response = await axios.post(apiUrl, { name });
            setUsers([...users, response.data]);
            setName('');
        } catch (error) {
            console.error('Error adding user:', error);
        }
    };

    return (
        <div>
            <h1>Users</h1>
            <ul>
                {users.map(user => (
                    <li key={user.id}>{user.name}</li>
                ))}
            </ul>
            <h2>Add User</h2>
            <form onSubmit={addUser}>
                <input
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    placeholder="Name"
                    required
                />
                <button type="submit">Add User</button>
            </form>
        </div>
    );
};

export default Users;


2. Use the Component in Your App


import React from 'react';
import Users from './Users';

const App = () => {
    return (
        <div>
            <Users />
        </div>
    );
};

export default App;

